import telebot
from telebot import types

from enums import *
import config
from database import *


bot: telebot.TeleBot = telebot.TeleBot(config.TOKEN)
me: telebot.types.User = bot.get_me()


class User:
    def __init__(self, tg_id, username):
        self.tg_id = tg_id
        self.username = username
        self.state = State()
        self.send = Send()


class State:
    def __init__(self):
        self.send = False
        self.reg_form = 0
        self.send_admin = 0

class Send:
    def __init__(self):
        self.id = {}

user_dict: dict[int, User] = {}


@bot.message_handler(commands=['start', 'return'])
def welcome(message: types.Message):
    sender: types.User = message.from_user
    chat_id = message.chat.id
    user_dict[chat_id] = User(sender.id, sender.username)

    user_dict[chat_id].state.reg_form = 0
    user_dict[chat_id].state.send = False
    user_dict[chat_id].state.send_admin = 0

    if message.chat.type != chat_types.private:
        return

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if chat_id == config.DEVELOPER_ID:
        markup.add(
            types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É üì©'),
            types.KeyboardButton('–ó–∞–ª–∏—à–∏—Ç–∏ –ê–Ω–∫–µ—Ç—É üßæ'),
            types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç–∏ –ª–∏—Å—Ç–∞ üì§')
        )
    else:
        markup.add(
            types.KeyboardButton('–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É üì©'),
            types.KeyboardButton('–ó–∞–ª–∏—à–∏—Ç–∏ –ê–Ω–∫–µ—Ç—É üßæ')
        )

    text = '–í–∞—Å –≤—ñ—Ç–∞—î –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –ø—Ä–∏–π–º–∞–ª—å–Ω–æ—ó –∫–æ–º—ñ—Å—ñ—ó.'
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.message_handler(content_types=['text'])
def consult_message(message: types.Message):
    sender: types.User = message.from_user
    chat_id = message.chat.id

    if chat_id not in user_dict:
        user_dict[chat_id] = User(sender.id, sender.username)


    if message.text == '–ù–∞–ø–∏—Å–∞—Ç–∏ –≤ –ø—ñ–¥—Ç—Ä–∏–º–∫—É üì©':
        user_dict[chat_id] = User(sender.id, sender.username)
        user_dict[chat_id].state.send = True

        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup1.add(
            types.KeyboardButton('/return')
        )
        bot.reply_to(message, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –π–æ–≥–æ –±–æ—Ç—É, –∞ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '
                              '"–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏". –ü—ñ–¥—Ç—Ä–∏–º–∫–∞ –Ω–µ–∑–∞–±–∞—Ä–æ–º –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º.', reply_markup=markup1)

    elif message.text == '–ó–∞–ª–∏—à–∏—Ç–∏ –ê–Ω–∫–µ—Ç—É üßæ':
        user_dict[chat_id] = User(sender.id, sender.username)
        user_dict[chat_id].state.reg_form = 1

        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup1.add(
            types.KeyboardButton('/return')
        )
        bot_response = bot.reply_to(message, '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à–µ —ñ–º—è:', reply_markup=markup1)

        person, created = Person.get_or_create(telegram_id=sender.id)

    elif chat_id == config.DEVELOPER_ID and message.text == '–ù–∞–ø–∏—Å–∞—Ç–∏ –ª–∏—Å—Ç–∞ üì§':
        user_dict[chat_id].state.send_admin = 1
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        markup1.add(
            types.KeyboardButton('/return')
        )
        bot.send_message(message.chat.id, '–í–∫–∞–∂—ñ—Ç—å id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —è–∫–æ–º—É —Ö–æ—á–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:',
                         reply_markup=markup1)


    elif user_dict[chat_id].state.send == True:
        message_consult = f'{message.chat.id} @{sender.username}, {message.text}'

        bot.send_message(config.DEVELOPER_ID, message_consult)
        user_dict[chat_id].state.send = False
        bot.send_message(message.chat.id, '–í–∞—à –ª–∏—Å—Ç –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ. –ù–µ–∑–∞–±–∞—Ä–æ–º –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –≤–∞–º!')

    elif user_dict[chat_id].state.reg_form == 1:
        person = Person.get(telegram_id=sender.id)
        person.first_name = message.text
        person.save()

        user_dict[chat_id].state.reg_form = 2
        bot.send_message(message.chat.id, '–í–∫–∞–∂—ñ—Ç—å –≤–∞—à—É —Ñ–∞–º—ñ–ª—ñ—é:')

    elif user_dict[chat_id].state.reg_form == 2:
        person = Person.get(telegram_id=sender.id)
        person.last_name = message.text
        person.save()

        user_dict[chat_id].state.reg_form = 3
        bot.send_message(message.chat.id, '–í–∫–∞–∂—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –±–µ–∑ –∫–æ–¥—É –∫—Ä–∞—ó–Ω–∏( –±–µ–∑ +38):')

    elif user_dict[chat_id].state.reg_form == 3:
        person = Person.get(telegram_id=sender.id)
        person.phone_number = message.text
        person.save()

        user_dict[chat_id].state.reg_form = 0
        bot.send_message(message.chat.id, '–î—è–∫—É—î–º–æ –∑–∞ —Ç–µ —â–æ –∑–∞–ª–∏—à–∏–ª–∏ –≤–∞—à—É –∞–Ω–∫–µ—Ç—É')
        sender_data = f'–ù–æ–≤–∞ –∞–Ω–∫–µ—Ç–∞ –¥–æ–¥–∞–Ω–∞ —É –±–∞–∑—É @{sender.username}, {sender.id}'
        bot.send_message(config.DEVELOPER_ID, sender_data)

    elif user_dict[chat_id].state.send_admin == 1:
        user_dict[chat_id].send.id = message.text
        user_dict[chat_id].state.send_admin = 2
        bot.send_message(message.chat.id, '–ù–∞–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É '
                                          '"–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏"')

    elif user_dict[chat_id].state.send_admin == 2:
        bot.send_message(user_dict[chat_id].send.id, message.text)
        user_dict[chat_id].state.send_admin = 0

        bot.send_message(message.chat.id, '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!')

def get_environment_info():
    from requests import get
    from platform import platform
    ip = get('https://api.ipify.org').text

    return {
        'ip': ip,
        'os': platform()
    }


# RUN
env = get_environment_info()
dev_greet = f'@{me.username} –∑–∞–ø—É—â–µ–Ω.\nIP: {env["ip"]}\nOS: {env["os"]}'
bot.send_message(config.DEVELOPER_ID, dev_greet)
bot.polling(none_stop=True)
